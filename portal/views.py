# portal/views.py
from django.shortcuts import render
from catalog.models import Dataset, Source, Theme, Organization
from django.core.paginator import Paginator
from random import uniform

def home(request):
    stats = {
        "sources_count": Source.objects.count(),
        "datasets_count": Dataset.objects.count(),
        "organizations_count": Organization.objects.count(),
        "themes_count": Theme.objects.count(),
    }

    sources_cards = [
        {"name": "OpenGouv", "url": "https://ouvert.canada.ca", "color": "primary"},
        {"name": "CanWin", "url": "https://canwin-datahub.ad.umanitoba.ca", "color": "success"},
        {"name": "Donn√©es Qu√©bec", "url": "https://www.donneesquebec.ca", "color": "warning"},
        {"name": "Bor√©alis", "url": "https://borealisdata.ca", "color": "purple"},
    ]

    # üó∫Ô∏è Simulation de coordonn√©es al√©atoires (si manquantes)
    for dataset in Dataset.objects.filter(latitude__isnull=True)[:100]:
        dataset.latitude = uniform(45.0, 49.5)    # entre Montr√©al et Qu√©bec
        dataset.longitude = uniform(-79.5, -65.0)
        dataset.save()

    # üìç Points pour l‚Äôaper√ßu cartographique
    points = (
        Dataset.objects.exclude(latitude__isnull=True)
        .exclude(longitude__isnull=True)
        .values("title", "description", "latitude", "longitude")[:50]
    )

    # üì¶ Tous les jeux de donn√©es (pagination)
    all_datasets = Dataset.objects.order_by("-publication_date")
    paginator = Paginator(all_datasets, 9)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    return render(request, "portal/home.html", {
        "stats": stats,
        "sources_cards": sources_cards,
        "page_obj": page_obj,
        "points": list(points),
    })


def search(request):
    """Recherche simple de datasets"""
    query = request.GET.get("q", "")
    results = []

    if query:
        results = Dataset.objects.filter(title__icontains=query)[:50]

    return render(request, "portal/search.html", {"query": query, "results": results})

def about(request):
    """Page √† propos de l'OGSL"""
    sections = [
        {
            "title": "Contexte",
            "id": "contexte",
            "content": """L‚ÄôObservatoire Global du Saint-Laurent (OGSL) a √©t√© cr√©√© pour centraliser,
            visualiser et partager les donn√©es ouvertes relatives au fleuve, √† ses √©cosyst√®mes
            et √† son environnement socio-√©conomique. Le projet met √† disposition des
            chercheurs, √©tudiants et citoyens un point d‚Äôacc√®s unifi√© aux ressources
            issues de plusieurs portails officiels de donn√©es ouvertes."""
        },
        {
            "title": "Mission et vision",
            "id": "mission",
            "content": """La mission de l‚ÄôOGSL est de promouvoir la transparence, la
            collaboration et la valorisation des donn√©es environnementales. Notre vision
            est celle d‚Äôun √©cosyst√®me num√©rique ouvert o√π les donn√©es du Saint-Laurent
            sont accessibles, interop√©rables et exploitables pour l‚Äôinnovation, la recherche
            et la prise de d√©cision publique."""
        },
        {
            "title": "Concept d‚Äôobservatoire",
            "id": "concept",
            "content": """L‚ÄôOGSL repose sur le concept d‚Äôun observatoire num√©rique
            regroupant diverses sources de donn√©es (gouvernementales, municipales,
            scientifiques). Ces donn√©es sont moissonn√©es automatiquement, class√©es par
            th√®mes, visualis√©es sur une carte et consultables via un tableau de bord
            interactif, une API REST et un endpoint GraphQL."""
        },
    ]
    return render(request, "portal/about.html", {"sections": sections})

